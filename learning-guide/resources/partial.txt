
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(PARTIAL())

takes a func as first argument, and do that function to each of the following arguments
________________
(defn sum
  "Sum two numbers together"
  [number1 number2]
  (+ number1 number2))

(println
(map (partial sum 2) [1 3 4 5 7 9 ]) ; add '2' to each number in the vector
)

;This won't work which is why we need a func called sum:
"
(println
 (map + 2 [1 2 3 4 5])
)
"
(println
 (map + [1 2 3] [4 5 6]) ;this will just add these lists together to each column bc of map!
 )
________________

**** More explanation
when you want to reduce a list (aka add all things together) We can use the reduce function:

__________________
(reduce + [1 2 3 4])
;; => 10
(reduce + [1 2 3 4] [5 6 7 8])
;; returns an error due to invalid arguments
------------------

As we see, We can't do many lists at a time..
That's where *partial()* is useful. W/ Partial, we can take
more than one argument at a time, and do it to each collection at a time!
#+begin_src clojure
(map (partial reduce +) [[1 2 3 4] [5 6 7 8]])
#+end_src
Map() here will just put these two answers list together
